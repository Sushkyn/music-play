#!/usr/bin/env bash

command -v yt-dlp >/dev/null || { echo " yt-dlp not found"; exit 1; }
command -v mpv >/dev/null || { echo "  mpv not found"; exit 1; }
command -v jq >/dev/null || { echo "jq not found"; exit 1; }

SCRIPT_DIR="$(cd "$(dirname "$0")" && pwd)"
if [[ -n "$1" && -f "$1" && "$1" == *.txt ]]; then
    echo " Found playlist file: $1. Queuing songs..."
    while IFS= read -r line; do
        [[ -n "$line" ]] && queue+=("$line")
    done < "$1"
    mode="1"
    skip_mode_selection=true
fi

cleanup() {
    echo -e "\n Cleaning up..."
    reset
    exit 0
}
trap cleanup INT TERM EXIT
clear
queue=()
echo " Welcome to simple-music-player."
espeak-ng -v en+f3 -s 140 -p 60 -a 150 " Welcome to simple-music-player."
if [[ "$skip_mode_selection" != "true" ]]; then
    while true; do
        echo "Select mode:"
        echo "1) normal quality - yt-dlp opus online streaming (default)"
        echo "2) high quality   - flac type online streaming"
        echo "3) local album    - download from web archive"
        read -rp ">_: " mode
        mode="${mode:-1}"
        [[ "$mode" == "1" || "$mode" == "2" || "$mode" == "3" ]] && break
        echo "Invalid selection. Please choose 1, 2, or 3."
    done
fi
if [[ "$mode" == "3" ]]; then
    read -rp "Enter album directory path: " album_dir
    if [ -d "$album_dir" ]; then
        echo " Found directory: $album_dir. Queuing audio files..."
        while IFS= read -r -d '' file; do
            queue+=("$file")
        done < <(find "$album_dir" -type f \( -iname "*.mp3" -o -iname "*.wav" -o -iname "*.flac" -o -iname "*.ogg" -o -iname "*.m4a" \) -print0)
    else
        echo " Directory not found."
        exit 1
    fi
elif [[ "$mode" == "2" ]]; then
    while true; do
        echo -e "\n Enter search query (FLAC only, archive.org):"
        read -rp ">_: " query
        [ -z "$query" ] && break

        search_url="https://archive.org/advancedsearch.php?q=${query// /+}+AND+format%3A(FLAC)&fl[]=identifier&fl[]=title&sort[]=downloads+desc&rows=20&page=1&output=json"
        results=$(curl -s "$search_url")

        mapfile -t items < <(echo "$results" | jq -r '.response.docs[] | "\(.title) [\(.identifier)]"')

        if [ ${#items[@]} -eq 0 ]; then
            echo "No results found."
            continue
        fi

        selected=$(printf '%s\n' "${items[@]}" | fzf --prompt="Select item > ")
        [ -z "$selected" ] && continue

        identifier=$(echo "$selected" | sed -E 's/.*\[(.*)\]/\1/')
        file_list=$(curl -s "https://archive.org/metadata/$identifier" | jq -r '.files[] | select(.format=="Flac") | .name')

        if [ -z "$file_list" ]; then
            echo "No FLAC files found in $identifier."
            continue
        fi

        selected_track=$(echo "$file_list" | fzf --prompt="Select track > ")
        [ -z "$selected_track" ] && continue

        file_url="https://archive.org/download/$identifier/$(printf '%s' "$selected_track" | sed 's| |%20|g')"

        echo " Now playing: $selected_track"
	espeak-ng -v en+f3 -s 140 -p 60 -a 150 "Now playing $query"
        mpv --no-video --no-ytdl --cache-secs=35 --cache-pause=yes "$file_url"
    done

    exit 0
fi
if [ -n "$1" ] && [ -d "$1" ]; then
    echo " Found directory: $1. Queuing audio files..."
    while IFS= read -r -d '' file; do
        queue+=("$file")
    done < <(find "$1" -type f \( -iname "*.mp3" -o -iname "*.wav" -o -iname "*.flac" -o -iname "*.ogg" -o -iname "*.m4a" \) -print0)
fi

if [ -n "$1" ] && [ -f "$1" ]; then
    echo " Found playlist file: $1. Queuing songs..."
    while IFS= read -r line; do
        [ -n "$line" ] && queue+=("$line")
    done < "$1"
fi
playlist_loop="N"

while true; do
    if [ ${#queue[@]} -eq 0 ] && [[ "$mode" == "1" ]]; then
	echo " Add songs to Queue."
        while true; do
            read -rp ">_: " song
            [ -z "$song" ] && break
            queue+=("$song")
        done

        if [ ${#queue[@]} -eq 0 ]; then
            echo " Queue is empty."
            continue
        fi
    fi

    echo -e "\n Starting playback... \n"

    for song in "${queue[@]}"; do
        clear
        echo " Now playing: $song"
        espeak-ng -v en+f3 -s 140 -p 60 -a 150 "Now.....  Playing:  $song"

        if [[ -f "$song" ]]; then
            STREAM_URL="$song"
        else
            STREAM_URL=$(yt-dlp -f 'worstaudio' -g "ytsearch1:$song" 2>/dev/null)
        fi

        if [ -z "$STREAM_URL" ]; then
            echo " Failed to get stream URL for: $song"
            espeak-ng -v en+f3 -s 140 -p 60 -a 150 " Failed to get stream URL for: $song"
            continue
        fi

        if [[ "$mode" == "1" ]]; then
	mpv --no-video --no-ytdl --cache=yes --cache-secs=90 --demuxer-max-bytes=500MiB --demuxer-max-back-bytes=100MiB --cache-pause=yes --network-timeout=60 --hr-seek=yes --stream-lavf-o="reconnect=1,reconnect_streamed=1 reconnect_delay_max=30" --term-status-msg='l> ${time-pos} / ${duration}' --msg-level=status=info "$STREAM_URL" &

	else
            mpv --no-video --term-status-msg='l> ${time-pos} / ${duration}' --msg-level=status=info "$STREAM_URL" &
        fi

        MPV_PID=$!
        wait "$MPV_PID"
        while kill -0 $MPV_PID 2>/dev/null; do
            read -rsn1 -t 0.1 key
            if [[ "$key" == "q" ]]; then
                echo " Skipping..."
                kill $MPV_PID
                wait $MPV_PID 2>/dev/null
                break
            fi
        done
        echo ""
    done
    espeak-ng -v en+f3 -s 140 -p 60 -a 150 "Do you want to loop the playlist?"
    read -rp $'\nDo you want to loop the playlist? (Y/N) >_: ' playlist_loop
    playlist_loop=${playlist_loop^^}

    if [[ "$playlist_loop" == "Y" ]]; then
        echo " Replaying playlist..."
        continue
    else
        echo " Queue finished."
        espeak-ng -v en+f3 -s 140 -p 60 -a 150 " Queue finished."
        queue=()
    fi
done
